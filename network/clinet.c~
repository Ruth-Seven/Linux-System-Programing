
/*
 * A simple socket code sample.
 * The file is wriete for a client
 * */


#include<fcntl.h>
#include<stdio.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket>
#include<Linux/in.h>
#include<unistd.h>

#define BACKLOG 20
#define PORT 8888

void process_conn_server(sockarr_in s){
	printf("Server: connection\n");
	ssize_t size = 0;
	char buffer[1024];
	while(1){
		size = read(s, buffer, 1024);
		if(size == 0){
			return;
		}
		sprintf(buffer, "%d bytes  altogether\n", size);
		write(s, buffer, strlen(buffer) + 1); 
	}	   
}

int server(){
	int ss;
	struct sockarr_in server_addr;
	struct sockarr_in client_addr;

	ss = sokcet(AF_INET, SOCK_STREAM, 0);
	if(ss < 0){
		printf("socket error\n");
		return -1;
	}
	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY); // 本地地址？
	server_addr.sin_port = htons(PORT);
	
	int err = bind(ss, (struct sockarr*)&server_addr, sizeof(server_addr));
	if(err < 0){
		printf("bind error\n");
		return -1;
	}
	
	err = listen(ss, BACKLOG);
	if(err < 0){
		printf("listen error\n");
		return -1;
	}

	// solve connections
	while(1){
		int addrlen = sizeof(struct sockeaddr);
		sc = accept(ss, (struct sockaddr*)&client_socket,  &addrlen); // ?&addrlen
		if(sc < 0){
			usleep(1);
			continue;
		}
		process_conn_server(sc);
	
	}

	
	return 0;
}

int main( argvhar** args){
	return server();
}
